{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","toLowerCase","trim","split","filter","currText","length","defaultProps","aboutText","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6383233a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n// rfc for this snippets\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} aria-checked='true'/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark' ? 'Disable' : 'Enable'} Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"title here\",\r\n  aboutText: \"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const clearText = () => {\r\n        let newText = ''\r\n        setText(newText);\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log('Button Clicked', text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        // console.log('Button Clicked', text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log('On Change')\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // learn this syntax\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading} </h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"=myBox\" rows=\"8\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-info mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-info mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-info mx-2\" onClick={clearText}>Reset</button>\r\n            </div>\r\n            <div className=\"container my-4\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Text Summary</h2>\r\n                <p>{text.trim().split(' ').filter(currText => {\r\n                    let newString = currText.trim()\r\n                    if (newString.length > 0) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }).length} Words and {text.length} Charcters</p>\r\n                <p>{0.008 * text.split(' ').length} Minutes Read</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length === 0 ? \"Enter something in the above textbox to preview\" : text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar'\n// import About from './components/About'\nimport TextForm from './components/TextForm'\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#18345e'\n      document.title = \"TextUtils - Dark Mode\"\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      document.title = \"TextUtils - Light\"\n    }\n  }\n  return (\n    < >\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* /user -- component 1\n            /user/home -- component 2 */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter Text\" mode={mode} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}